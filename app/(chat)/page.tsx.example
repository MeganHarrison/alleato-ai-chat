/**
 * Example of how to use the Alleato Backend SDK in your frontend
 */

import { useState, useEffect } from 'react';
import { alleato } from '@/lib/alleato-sdk';

export default function ChatPage() {
  const [chats, setChats] = useState([]);
  const [currentChat, setCurrentChat] = useState(null);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Load user's chats
  useEffect(() => {
    loadChats();
  }, []);

  const loadChats = async () => {
    try {
      const { chats } = await alleato.chats.list();
      setChats(chats);
    } catch (error) {
      console.error('Failed to load chats:', error);
    }
  };

  // Create new chat
  const createChat = async () => {
    try {
      const { chat } = await alleato.chats.create({
        title: 'New Chat',
        visibility: 'private',
      });
      setChats([...chats, chat]);
      setCurrentChat(chat);
      setMessages([]);
    } catch (error) {
      console.error('Failed to create chat:', error);
    }
  };

  // Send message
  const sendMessage = async () => {
    if (!currentChat || !input.trim() || isLoading) return;

    const userMessage = { role: 'user', content: input };
    setMessages([...messages, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      // Get the stream
      const stream = await alleato.chats.sendMessage(
        currentChat.id,
        [...messages, userMessage]
      );

      // Process the stream
      const reader = stream.getReader();
      const decoder = new TextDecoder();
      let assistantMessage = { role: 'assistant', content: '' };

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value);
        assistantMessage.content += chunk;
        
        // Update messages with streaming content
        setMessages([...messages, userMessage, assistantMessage]);
      }
    } catch (error) {
      console.error('Failed to send message:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Upload file
  const uploadFile = async (file: File) => {
    try {
      const result = await alleato.files.upload(file);
      console.log('File uploaded:', result);
      
      // Add file reference to message
      const fileMessage = {
        role: 'user',
        content: `Uploaded file: ${file.name}`,
        attachments: [result.url],
      };
      setMessages([...messages, fileMessage]);
    } catch (error) {
      console.error('Failed to upload file:', error);
    }
  };

  return (
    <div className="flex h-screen">
      {/* Sidebar */}
      <div className="w-64 bg-gray-100 p-4">
        <button
          onClick={createChat}
          className="w-full mb-4 p-2 bg-blue-500 text-white rounded"
        >
          New Chat
        </button>
        
        <div className="space-y-2">
          {chats.map((chat) => (
            <div
              key={chat.id}
              onClick={() => setCurrentChat(chat)}
              className={`p-2 rounded cursor-pointer ${
                currentChat?.id === chat.id ? 'bg-blue-200' : 'hover:bg-gray-200'
              }`}
            >
              {chat.title}
            </div>
          ))}
        </div>
      </div>

      {/* Chat area */}
      <div className="flex-1 flex flex-col">
        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4">
          {messages.map((message, i) => (
            <div
              key={i}
              className={`mb-4 ${
                message.role === 'user' ? 'text-right' : 'text-left'
              }`}
            >
              <div
                className={`inline-block p-2 rounded ${
                  message.role === 'user'
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-200'
                }`}
              >
                {message.content}
              </div>
            </div>
          ))}
          
          {isLoading && (
            <div className="text-center text-gray-500">
              AI is thinking...
            </div>
          )}
        </div>

        {/* Input */}
        <div className="border-t p-4">
          <div className="flex gap-2">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
              placeholder="Type a message..."
              className="flex-1 p-2 border rounded"
              disabled={!currentChat || isLoading}
            />
            
            <input
              type="file"
              onChange={(e) => e.target.files?.[0] && uploadFile(e.target.files[0])}
              className="hidden"
              id="file-upload"
            />
            <label
              htmlFor="file-upload"
              className="p-2 bg-gray-200 rounded cursor-pointer hover:bg-gray-300"
            >
              ðŸ“Ž
            </label>
            
            <button
              onClick={sendMessage}
              disabled={!currentChat || !input.trim() || isLoading}
              className="p-2 bg-blue-500 text-white rounded disabled:opacity-50"
            >
              Send
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}